const express = require('express');
import { Telegraf, Scenes, session, Context } from 'telegraf';
import { getStartMenu } from './keyboards';
const db = require('./db');
const userRoutes = require('./routes/user-routes');
import viewSeatWizard from './scene/viewSeat';
import { SCENES } from './constants/config';
import createSeat from './scene/createSeatScene';
import contactDataWizard from './scene/registrationScene';
import createBooking from './scene/createBookingScene';
import editUserScene from './scene/editUser';
import { seatGetList } from './db/controllers/seat-controller';
import { userGetList } from './db/controllers/user-controller';
const { TOKEN, PORT } = require('./config');

const app = express();
app.use(express.json());
app.use(userRoutes);

const stage = new Scenes.Stage([
  contactDataWizard,
  viewSeatWizard,
  createSeat,
  createBooking,
  editUserScene,
]);

const bot = new Telegraf(TOKEN);
bot.use(session());
bot.use(stage.middleware() as any);

bot.start((ctx: any) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', getStartMenu());
});

bot.hears('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö', async (ctx: Context) => {
  const seats = (await seatGetList()) as any[];
  let message = '';

  if (seats.length === 0) {
    message = '–ú–µ—Å—Ç–∞ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏';
  } else {
    seats.forEach(i => {
      message += `${i.userId ? 'üî¥' : 'üü¢'} –ú–µ—Å—Ç–æ: ${i.number}. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ: ${i.available ? '–î–∞' : '–ù–µ—Ç'}\n`;
      message += i.userId ? `–ö–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${i.userId.fio}\n\n` : '\n';
    });
  }

  return ctx.reply(message);
});
bot.hears('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö', async (ctx: Context) => {
  const users = await userGetList();
  let message = '';

  if (users.length === 0) {
    message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç';
  } else {
    users.forEach(i => {
      message += `${i.fio}\n`;
      message += `@${i.tgLogin} ${i.permanentBooking?.number ? '‚Ä¢ üî¥' + i.permanentBooking?.number : ''}\n\n`;
    });
  }

  return ctx.reply(message);
});
bot.hears('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞', Scenes.Stage.enter<any>(SCENES.VIEW_BOOKING));
bot.hears('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ', Scenes.Stage.enter<any>(SCENES.CREATE_SEAT));
bot.hears('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ', Scenes.Stage.enter<any>(SCENES.BOOKING));
bot.hears('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', Scenes.Stage.enter<any>(SCENES.REGISTRATION));
bot.hears(
  '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  Scenes.Stage.enter<any>(SCENES.EDIT_USER),
);

// –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
bot.on('text', () => {});

bot.launch();
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

app.listen(PORT, () => console.log(`My server is running on port ${PORT}`));
